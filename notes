<--
 vim:ft=markdown
-->

When you visit a website, assets are the files that your browser downloads and uses to display the page.

The bottom level components in a component hierarchy are often known as leaf components

To determine where a piece of state should reside:
• Identify every component that renders something based on that state.
• Find a common owner component (a single component above all the components
that need the state in the hierarchy).
• Either the common owner or another component higher up in the hierarchy
should own the state.
• If you can’t find a component where it makes sense to own the state, create a new
component simply for holding the state and add it somewhere in the hierarchy
above the common owner component.
pply this method to our application:

Curl's -X flag specifies the http method, -H the http header and -d the body of the request
$ curl -X POST \
-H 'Content-Type: application/json' \
-d '{"start":1456468632194,"id":"a73c1d19-f32d-4aff-b470-cea4e792406a"}' \
localhost:3000/api/timers/start

You can pipe output from curl through jq to get pretty-formatted json
You can also do some powerful manipulation of JSON, like iterating over all objects in the response
and returning a particular field. In this example, we extract just theidproperty of every object in
an array:
curl -X GET localhost:3000/api/timers | jq '.[] | { id }'

We’ll walk throughin detail later in this section, so for now we’ll set this parameter to.
Thechildrenof the DOM element must be aReactNodeobject, which is any of the following:
1. `ReactElement`
2. A string or a number (a `ReactText` object)
3. An array of `ReactNode`s

If we want to apply our own attributes that the HTML spec does not cover, we have to prefix the
attribute key with the string `data-`.
1<div className='box' data-dismissible={true} />
2<span data-highlight={true} />
This requirements only applies to DOM components that are native to HTML and does not mean
custom components cannot accept arbitrary keys as props. That is, we can accept any attribute on a
custom component:
1<Message dismissible={true} />
2<Note highlight={true} />
There are a standard set of web accessibility47attributes48and its a good idea to use them because
there are many people who will have a hard time using our site without them. We can use any of
these attribute on an element with the key prepended with the stringaria-. For instance, to set the
hiddenattribute:
1<div aria-hidden={true} />

WithgetChildContext()we can set the initial value of our context with the return value of the
function. Back in ourMessagescomponent, we will set ouruserscontext object to the value of the
this.props.usersgiven to the component.
advanced-components/components-cookbook/src/components/Messages/Messages.js
class Messages extends React.Component {
// ...
static childContextTypes = {
users: PropTypes.array,
userMap: PropTypes.object,
};
// ...
getChildContext() {
return {
users: this.getUsers(),
userMap: this.getUserMap(),
};
}
// ...
}
Since thestateandpropsof a component can change, thecontextcan change as well. The
getChildContext()method in the parent component gets called every time thestateorprops
change on the parent component. If thecontextis updated, then the children will receive the updated
context and will subsequently be re-rendered.

In order to grab the context in a child
component, we need to tell React we want access to it. We communicate this to React using the
contextTypesdefinition in the child.
The
context data is set on the this.context object of the component withcontextTypesdefined.

IfcontextTypesis defined on a component, then several of it’s lifecycle methods will get passed an
additional argument ofnextContext:
advanced-components/components-cookbook/src/components/Messages/ThreadList.js
class ThreadList extends React.Component {
// ...
static contextTypes = {
users: PropTypes.array,
};
// ...
componentWillReceiveProps(nextProps, nextContext) {
// ...
}
// ...
shouldComponentUpdate(nextProps, nextState, nextContext) {
// ...
}
// ...
componentWillUpdate(nextProps, nextState, nextContext) {
// ...
}
// ...
componentDidUpdate(prevProps, prevState, prevContext) {
// ...
}
In a functional stateless component,contextwill get passed as the second argument:
const ChatHeader = (props, context) => {
// ...
};

If we have a component that has UI states which:
1. cannot be “fetched” from outside or
2. cannot be passed into the component,
that’s usually a case for building state into the component.
However, any data that can be passed in throughpropsor by other components is usually best to
leave untouched. The only information we should ever put in state are values that are not computed
and do not need to be sync’d across the app.

One way that we can mitigate and minimize the complex states is by building our apps with a single
stateful component composed of stateless components: components that do not keep state.

Stateless Encourages Reuse
Stateless components are a great way to create reusable components. Because stateless components
need to have all of their configuration passed from the outside, we can often reuse stateless
components in nearly any project, provided that we supply the right hooks.

In the previous example, our text field is what we would call an “uncontrolled component”. This is another way of saying that React does not “control” how it is rendered – specifically its value. In other words, React is hands-off, and allows it to be freely influenced by user interaction.

By directly tying our view to our application state we get certain features for very little work. For example, imagine a long form where the user must answer many questions by filling out lots of input fields. If the user is halfway through and accidentally reloads the page that would ordinarily clear out all the fields. If these were controlled components and our application state was persisted to localStorage, we would be able to come back exactly where they left off. Later, we’ll get to another important feature that controlled components pave the way for: validation.

```javascript.jsx
function* count() {
  yield x
}
for (var x of count()) {
  console.log(x)
}
```
will lazily generate a stream of all the integers. The yield keyword will pause
function execution and resume when it is called again. This lets you write
```
function* take(list, n) {
  var i = 0
  for var x of list) {
    if (n === i++) {
        return
      }
      yield x
  }
}

for (var x of take(count(), 5)) {
  console.log(x)
}
```

`.done` lets you extract the value of a promise. `.then` transforms a promise into a new promise

Actions in Redux are objects. Actions always have a type property. Our increment actions will look like this:
Our increment actions will look like this:
{
  type: 'INCREMENT',
}
And decrement actions like this:
{
  type: 'DECREMENT',
}

read note 41 about Fetch, and 42 about promises
https://facebook.github.io/react/docs/jsx-in-depth.html
https://facebook.github.io/react/tips/if-else-in-JSX.html
https://facebook.github.io/react/docs/glossary.html
http://jbi.sh/what-is-virtual-dom/
https://medium.com/@shopsifter/using-a-function-in-setstate-instead-of-an-object-1f5cfd6e55d1
https://facebook.github.io/react/docs/events.html

